/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const CACHE_NAME = 'Fresh-Brews-V1';
const CACHE_URLS =  ['/public/index.html',                      
                     '/src/components/appbar.js',
                     '/src/components/basket.js',
                     '/src/components/Home.js',
                     '/src/components/login.js',
                     '/src/components/Menu.js',
                     '/src/components/Nav.js',
                     '/src/index.js',
                     ];

//add all URLs to cache when installed
self.addEventListener("install", function(event){
  console.log("Service worker installed");
  event.waitUntil(
      //create and open cache
      caches.open(CACHE_NAME)
          .then(function(cache){
              console.log("Cache opened");
              //add all URLs to cache
              return cache.addAll(CACHE_URLS);
      })
  );
});

 self.addEventListener("activate", event => {
   // delete any unexpected caches
  event.waituntil(
     caches
       .keys()
       .then(keys => keys.filter(key => key !== CACHE_NAME))
       .then(keys =>
         promise.all(
          keys.map(key => {
             console.log(`deleting cache ${key}`);
             return caches.delete(key);
           })
         )
       )
   );
 });

 function cache(request, response) {
   if (response.type === "error" || response.type === "opaque") {
     return promise.resolve(); // do not put in cache network errors
   }

   return caches
     .open(CACHE_NAME)
     .then(cache => cache.put(request, response.clone()));
 }

 self.addEventListener("fetch", event => {
   // cache-first strategy
   event.respondwith(
     caches
       .match(event.request) // check if the request has already been cached
      .then(cached => cached || fetch(event.request)) // otherwise request network
      .then(
        response =>
          cache(event.request, response) // put response in cache
            .then(() => response) // resolve promise with the network response
      )
  );
 });